//go:build ignore
// +build ignore

package main

import (
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"strings"
)

func main() {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, "types.go", nil, parser.AllErrors)
	if err != nil {
		panic(err)
	}

	var sb strings.Builder
	sb.WriteString("// Code generated by gen_types.go DO NOT EDIT.\n")
	sb.WriteString("package types\n\n")
	sb.WriteString("var AllTypes = map[string]struct{}{\n")

	for i, decl := range node.Decls {
		gen, ok := decl.(*ast.GenDecl)
		if !ok || gen.Tok.String() != "type" {
			continue
		}
		for _, spec := range gen.Specs {
			tspec := spec.(*ast.TypeSpec)
			if tspec.Name.IsExported() {
				if i == len(node.Decls)-1 {
					sb.WriteString("\t\"" + tspec.Name.Name + "\": {},\n")
				} else {

					sb.WriteString("\t\"" + tspec.Name.Name + "\": {},\n")
				}

			}
		}
	}
	sb.WriteString("}\n")

	err = os.WriteFile("generated_types.go", []byte(sb.String()), 0644)
	if err != nil {
		panic(err)
	}
}
